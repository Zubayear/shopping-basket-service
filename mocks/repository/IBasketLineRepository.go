// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	ent "ShoppingBasket/ent"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IBasketLineRepository is an autogenerated mock type for the IBasketLineRepository type
type IBasketLineRepository struct {
	mock.Mock
}

// AddBasketLine provides a mock function with given fields: ctx, basketId, basketLine
func (_m *IBasketLineRepository) AddBasketLine(ctx context.Context, basketId uuid.UUID, basketLine *ent.BasketLine) (*ent.BasketLine, error) {
	ret := _m.Called(ctx, basketId, basketLine)

	var r0 *ent.BasketLine
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *ent.BasketLine) *ent.BasketLine); ok {
		r0 = rf(ctx, basketId, basketLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.BasketLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *ent.BasketLine) error); ok {
		r1 = rf(ctx, basketId, basketLine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBasketLine provides a mock function with given fields: ctx, basketLineId
func (_m *IBasketLineRepository) DeleteBasketLine(ctx context.Context, basketLineId uuid.UUID) (string, error) {
	ret := _m.Called(ctx, basketLineId)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, basketLineId)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, basketLineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasketLineById provides a mock function with given fields: ctx, basketLineId
func (_m *IBasketLineRepository) GetBasketLineById(ctx context.Context, basketLineId uuid.UUID) (*ent.BasketLine, error) {
	ret := _m.Called(ctx, basketLineId)

	var r0 *ent.BasketLine
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.BasketLine); ok {
		r0 = rf(ctx, basketLineId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.BasketLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, basketLineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasketLinesByBasketId provides a mock function with given fields: ctx, basketId
func (_m *IBasketLineRepository) GetBasketLinesByBasketId(ctx context.Context, basketId uuid.UUID) ([]*ent.BasketLine, error) {
	ret := _m.Called(ctx, basketId)

	var r0 []*ent.BasketLine
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.BasketLine); ok {
		r0 = rf(ctx, basketId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.BasketLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, basketId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBasketLine provides a mock function with given fields: ctx, basketLine
func (_m *IBasketLineRepository) UpdateBasketLine(ctx context.Context, basketLine *ent.BasketLine) (*ent.BasketLine, error) {
	ret := _m.Called(ctx, basketLine)

	var r0 *ent.BasketLine
	if rf, ok := ret.Get(0).(func(context.Context, *ent.BasketLine) *ent.BasketLine); ok {
		r0 = rf(ctx, basketLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.BasketLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ent.BasketLine) error); ok {
		r1 = rf(ctx, basketLine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
