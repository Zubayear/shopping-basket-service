// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	ent "ShoppingBasket/ent"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IEventRepository is an autogenerated mock type for the IEventRepository type
type IEventRepository struct {
	mock.Mock
}

// AddEvent provides a mock function with given fields: ctx, event
func (_m *IEventRepository) AddEvent(ctx context.Context, event *ent.Event) (*ent.Event, error) {
	ret := _m.Called(ctx, event)

	var r0 *ent.Event
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Event) *ent.Event); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ent.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventById provides a mock function with given fields: ctx, eventId
func (_m *IEventRepository) GetEventById(ctx context.Context, eventId uuid.UUID) (*ent.Event, error) {
	ret := _m.Called(ctx, eventId)

	var r0 *ent.Event
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Event); ok {
		r0 = rf(ctx, eventId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, eventId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
