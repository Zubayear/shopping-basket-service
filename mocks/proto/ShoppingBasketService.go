// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	ShoppingBasket "ShoppingBasket/proto"

	client "go-micro.dev/v4/client"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ShoppingBasketService is an autogenerated mock type for the ShoppingBasketService type
type ShoppingBasketService struct {
	mock.Mock
}

// CreateBasket provides a mock function with given fields: ctx, in, opts
func (_m *ShoppingBasketService) CreateBasket(ctx context.Context, in *ShoppingBasket.CreateBasketRequest, opts ...client.CallOption) (*ShoppingBasket.CreateBasketResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ShoppingBasket.CreateBasketResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingBasket.CreateBasketRequest, ...client.CallOption) *ShoppingBasket.CreateBasketResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShoppingBasket.CreateBasketResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ShoppingBasket.CreateBasketRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBasketLine provides a mock function with given fields: ctx, in, opts
func (_m *ShoppingBasketService) CreateBasketLine(ctx context.Context, in *ShoppingBasket.CreateBasketLineRequest, opts ...client.CallOption) (*ShoppingBasket.CreateBasketLineResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ShoppingBasket.CreateBasketLineResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingBasket.CreateBasketLineRequest, ...client.CallOption) *ShoppingBasket.CreateBasketLineResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShoppingBasket.CreateBasketLineResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ShoppingBasket.CreateBasketLineRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEvent provides a mock function with given fields: ctx, in, opts
func (_m *ShoppingBasketService) CreateEvent(ctx context.Context, in *ShoppingBasket.CreateEventRequest, opts ...client.CallOption) (*ShoppingBasket.CreateEventResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ShoppingBasket.CreateEventResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingBasket.CreateEventRequest, ...client.CallOption) *ShoppingBasket.CreateEventResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShoppingBasket.CreateEventResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ShoppingBasket.CreateEventRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBasketLineById provides a mock function with given fields: ctx, in, opts
func (_m *ShoppingBasketService) DeleteBasketLineById(ctx context.Context, in *ShoppingBasket.DeleteBasketLineByIdRequest, opts ...client.CallOption) (*ShoppingBasket.DeleteBasketLineByIdResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ShoppingBasket.DeleteBasketLineByIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingBasket.DeleteBasketLineByIdRequest, ...client.CallOption) *ShoppingBasket.DeleteBasketLineByIdResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShoppingBasket.DeleteBasketLineByIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ShoppingBasket.DeleteBasketLineByIdRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasketById provides a mock function with given fields: ctx, in, opts
func (_m *ShoppingBasketService) GetBasketById(ctx context.Context, in *ShoppingBasket.GetBasketByIdRequest, opts ...client.CallOption) (*ShoppingBasket.GetBasketByIdResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ShoppingBasket.GetBasketByIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingBasket.GetBasketByIdRequest, ...client.CallOption) *ShoppingBasket.GetBasketByIdResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShoppingBasket.GetBasketByIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ShoppingBasket.GetBasketByIdRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasketLineById provides a mock function with given fields: ctx, in, opts
func (_m *ShoppingBasketService) GetBasketLineById(ctx context.Context, in *ShoppingBasket.GetBasketLineByIdRequest, opts ...client.CallOption) (*ShoppingBasket.GetBasketLineByIdResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ShoppingBasket.GetBasketLineByIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingBasket.GetBasketLineByIdRequest, ...client.CallOption) *ShoppingBasket.GetBasketLineByIdResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShoppingBasket.GetBasketLineByIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ShoppingBasket.GetBasketLineByIdRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasketLinesByBasketId provides a mock function with given fields: ctx, in, opts
func (_m *ShoppingBasketService) GetBasketLinesByBasketId(ctx context.Context, in *ShoppingBasket.GetBasketLinesByBasketIdRequest, opts ...client.CallOption) (*ShoppingBasket.GetBasketLinesByBasketIdResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ShoppingBasket.GetBasketLinesByBasketIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingBasket.GetBasketLinesByBasketIdRequest, ...client.CallOption) *ShoppingBasket.GetBasketLinesByBasketIdResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShoppingBasket.GetBasketLinesByBasketIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ShoppingBasket.GetBasketLinesByBasketIdRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventById provides a mock function with given fields: ctx, in, opts
func (_m *ShoppingBasketService) GetEventById(ctx context.Context, in *ShoppingBasket.GetEventByIdRequest, opts ...client.CallOption) (*ShoppingBasket.GetEventByIdResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ShoppingBasket.GetEventByIdResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingBasket.GetEventByIdRequest, ...client.CallOption) *ShoppingBasket.GetEventByIdResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShoppingBasket.GetEventByIdResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ShoppingBasket.GetEventByIdRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBasketLine provides a mock function with given fields: ctx, in, opts
func (_m *ShoppingBasketService) UpdateBasketLine(ctx context.Context, in *ShoppingBasket.UpdateBasketLineRequest, opts ...client.CallOption) (*ShoppingBasket.UpdateBasketLineResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ShoppingBasket.UpdateBasketLineResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ShoppingBasket.UpdateBasketLineRequest, ...client.CallOption) *ShoppingBasket.UpdateBasketLineResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ShoppingBasket.UpdateBasketLineResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ShoppingBasket.UpdateBasketLineRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
