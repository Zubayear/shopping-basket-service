// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: coupon-client/Coupon.proto

package Coupon

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CouponService service

func NewCouponServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CouponService service

type CouponService interface {
	UseCoupon(ctx context.Context, in *UseCouponRequest, opts ...client.CallOption) (*UseCouponResponse, error)
}

type couponService struct {
	c    client.Client
	name string
}

func NewCouponService(name string, c client.Client) CouponService {
	return &couponService{
		c:    c,
		name: name,
	}
}

func (c *couponService) UseCoupon(ctx context.Context, in *UseCouponRequest, opts ...client.CallOption) (*UseCouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.UseCoupon", in)
	out := new(UseCouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CouponService service

type CouponServiceHandler interface {
	UseCoupon(context.Context, *UseCouponRequest, *UseCouponResponse) error
}

func RegisterCouponServiceHandler(s server.Server, hdlr CouponServiceHandler, opts ...server.HandlerOption) error {
	type couponService interface {
		UseCoupon(ctx context.Context, in *UseCouponRequest, out *UseCouponResponse) error
	}
	type CouponService struct {
		couponService
	}
	h := &couponServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CouponService{h}, opts...))
}

type couponServiceHandler struct {
	CouponServiceHandler
}

func (h *couponServiceHandler) UseCoupon(ctx context.Context, in *UseCouponRequest, out *UseCouponResponse) error {
	return h.CouponServiceHandler.UseCoupon(ctx, in, out)
}
