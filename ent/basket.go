// Code generated by entc, DO NOT EDIT.

package ent

import (
	"ShoppingBasket/ent/basket"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Basket is the model entity for the Basket schema.
type Basket struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserId holds the value of the "UserId" field.
	UserId uuid.UUID `json:"UserId,omitempty"`
	// CouponCode holds the value of the "CouponCode" field.
	CouponCode string `json:"CouponCode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BasketQuery when eager-loading is set.
	Edges BasketEdges `json:"edges"`
}

// BasketEdges holds the relations/edges for other nodes in the graph.
type BasketEdges struct {
	// BasketLine holds the value of the BasketLine edge.
	BasketLine []*BasketLine `json:"BasketLine,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BasketLineOrErr returns the BasketLine value or an error if the edge
// was not loaded in eager-loading.
func (e BasketEdges) BasketLineOrErr() ([]*BasketLine, error) {
	if e.loadedTypes[0] {
		return e.BasketLine, nil
	}
	return nil, &NotLoadedError{edge: "BasketLine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Basket) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case basket.FieldCouponCode:
			values[i] = new(sql.NullString)
		case basket.FieldID, basket.FieldUserId:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Basket", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Basket fields.
func (b *Basket) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case basket.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case basket.FieldUserId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field UserId", values[i])
			} else if value != nil {
				b.UserId = *value
			}
		case basket.FieldCouponCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CouponCode", values[i])
			} else if value.Valid {
				b.CouponCode = value.String
			}
		}
	}
	return nil
}

// QueryBasketLine queries the "BasketLine" edge of the Basket entity.
func (b *Basket) QueryBasketLine() *BasketLineQuery {
	return (&BasketClient{config: b.config}).QueryBasketLine(b)
}

// Update returns a builder for updating this Basket.
// Note that you need to call Basket.Unwrap() before calling this method if this Basket
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Basket) Update() *BasketUpdateOne {
	return (&BasketClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Basket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Basket) Unwrap() *Basket {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Basket is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Basket) String() string {
	var builder strings.Builder
	builder.WriteString("Basket(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", UserId=")
	builder.WriteString(fmt.Sprintf("%v", b.UserId))
	builder.WriteString(", CouponCode=")
	builder.WriteString(b.CouponCode)
	builder.WriteByte(')')
	return builder.String()
}

// Baskets is a parsable slice of Basket.
type Baskets []*Basket

func (b Baskets) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
