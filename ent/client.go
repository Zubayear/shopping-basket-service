// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"ShoppingBasket/ent/migrate"

	"ShoppingBasket/ent/basket"
	"ShoppingBasket/ent/basketline"
	"ShoppingBasket/ent/event"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Basket is the client for interacting with the Basket builders.
	Basket *BasketClient
	// BasketLine is the client for interacting with the BasketLine builders.
	BasketLine *BasketLineClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Basket = NewBasketClient(c.config)
	c.BasketLine = NewBasketLineClient(c.config)
	c.Event = NewEventClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Basket:     NewBasketClient(cfg),
		BasketLine: NewBasketLineClient(cfg),
		Event:      NewEventClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Basket:     NewBasketClient(cfg),
		BasketLine: NewBasketLineClient(cfg),
		Event:      NewEventClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Basket.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Basket.Use(hooks...)
	c.BasketLine.Use(hooks...)
	c.Event.Use(hooks...)
}

// BasketClient is a client for the Basket schema.
type BasketClient struct {
	config
}

// NewBasketClient returns a client for the Basket from the given config.
func NewBasketClient(c config) *BasketClient {
	return &BasketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `basket.Hooks(f(g(h())))`.
func (c *BasketClient) Use(hooks ...Hook) {
	c.hooks.Basket = append(c.hooks.Basket, hooks...)
}

// Create returns a create builder for Basket.
func (c *BasketClient) Create() *BasketCreate {
	mutation := newBasketMutation(c.config, OpCreate)
	return &BasketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Basket entities.
func (c *BasketClient) CreateBulk(builders ...*BasketCreate) *BasketCreateBulk {
	return &BasketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Basket.
func (c *BasketClient) Update() *BasketUpdate {
	mutation := newBasketMutation(c.config, OpUpdate)
	return &BasketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BasketClient) UpdateOne(b *Basket) *BasketUpdateOne {
	mutation := newBasketMutation(c.config, OpUpdateOne, withBasket(b))
	return &BasketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BasketClient) UpdateOneID(id uuid.UUID) *BasketUpdateOne {
	mutation := newBasketMutation(c.config, OpUpdateOne, withBasketID(id))
	return &BasketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Basket.
func (c *BasketClient) Delete() *BasketDelete {
	mutation := newBasketMutation(c.config, OpDelete)
	return &BasketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BasketClient) DeleteOne(b *Basket) *BasketDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BasketClient) DeleteOneID(id uuid.UUID) *BasketDeleteOne {
	builder := c.Delete().Where(basket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BasketDeleteOne{builder}
}

// Query returns a query builder for Basket.
func (c *BasketClient) Query() *BasketQuery {
	return &BasketQuery{
		config: c.config,
	}
}

// Get returns a Basket entity by its id.
func (c *BasketClient) Get(ctx context.Context, id uuid.UUID) (*Basket, error) {
	return c.Query().Where(basket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BasketClient) GetX(ctx context.Context, id uuid.UUID) *Basket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBasketLine queries the BasketLine edge of a Basket.
func (c *BasketClient) QueryBasketLine(b *Basket) *BasketLineQuery {
	query := &BasketLineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(basket.Table, basket.FieldID, id),
			sqlgraph.To(basketline.Table, basketline.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, basket.BasketLineTable, basket.BasketLineColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BasketClient) Hooks() []Hook {
	return c.hooks.Basket
}

// BasketLineClient is a client for the BasketLine schema.
type BasketLineClient struct {
	config
}

// NewBasketLineClient returns a client for the BasketLine from the given config.
func NewBasketLineClient(c config) *BasketLineClient {
	return &BasketLineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `basketline.Hooks(f(g(h())))`.
func (c *BasketLineClient) Use(hooks ...Hook) {
	c.hooks.BasketLine = append(c.hooks.BasketLine, hooks...)
}

// Create returns a create builder for BasketLine.
func (c *BasketLineClient) Create() *BasketLineCreate {
	mutation := newBasketLineMutation(c.config, OpCreate)
	return &BasketLineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BasketLine entities.
func (c *BasketLineClient) CreateBulk(builders ...*BasketLineCreate) *BasketLineCreateBulk {
	return &BasketLineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BasketLine.
func (c *BasketLineClient) Update() *BasketLineUpdate {
	mutation := newBasketLineMutation(c.config, OpUpdate)
	return &BasketLineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BasketLineClient) UpdateOne(bl *BasketLine) *BasketLineUpdateOne {
	mutation := newBasketLineMutation(c.config, OpUpdateOne, withBasketLine(bl))
	return &BasketLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BasketLineClient) UpdateOneID(id uuid.UUID) *BasketLineUpdateOne {
	mutation := newBasketLineMutation(c.config, OpUpdateOne, withBasketLineID(id))
	return &BasketLineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BasketLine.
func (c *BasketLineClient) Delete() *BasketLineDelete {
	mutation := newBasketLineMutation(c.config, OpDelete)
	return &BasketLineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BasketLineClient) DeleteOne(bl *BasketLine) *BasketLineDeleteOne {
	return c.DeleteOneID(bl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BasketLineClient) DeleteOneID(id uuid.UUID) *BasketLineDeleteOne {
	builder := c.Delete().Where(basketline.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BasketLineDeleteOne{builder}
}

// Query returns a query builder for BasketLine.
func (c *BasketLineClient) Query() *BasketLineQuery {
	return &BasketLineQuery{
		config: c.config,
	}
}

// Get returns a BasketLine entity by its id.
func (c *BasketLineClient) Get(ctx context.Context, id uuid.UUID) (*BasketLine, error) {
	return c.Query().Where(basketline.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BasketLineClient) GetX(ctx context.Context, id uuid.UUID) *BasketLine {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the Event edge of a BasketLine.
func (c *BasketLineClient) QueryEvent(bl *BasketLine) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(basketline.Table, basketline.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, basketline.EventTable, basketline.EventColumn),
		)
		fromV = sqlgraph.Neighbors(bl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBasket queries the Basket edge of a BasketLine.
func (c *BasketLineClient) QueryBasket(bl *BasketLine) *BasketQuery {
	query := &BasketQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(basketline.Table, basketline.FieldID, id),
			sqlgraph.To(basket.Table, basket.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, basketline.BasketTable, basketline.BasketColumn),
		)
		fromV = sqlgraph.Neighbors(bl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BasketLineClient) Hooks() []Hook {
	return c.hooks.BasketLine
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Create returns a create builder for Event.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id uuid.UUID) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EventClient) DeleteOneID(id uuid.UUID) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id uuid.UUID) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id uuid.UUID) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Event.
func (c *EventClient) QueryOwner(e *Event) *BasketLineQuery {
	query := &BasketLineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(basketline.Table, basketline.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, event.OwnerTable, event.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}
