// Code generated by entc, DO NOT EDIT.

package ent

import (
	"ShoppingBasket/ent/basket"
	"ShoppingBasket/ent/basketline"
	"ShoppingBasket/ent/event"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BasketLineCreate is the builder for creating a BasketLine entity.
type BasketLineCreate struct {
	config
	mutation *BasketLineMutation
	hooks    []Hook
}

// SetTicketAmount sets the "TicketAmount" field.
func (blc *BasketLineCreate) SetTicketAmount(u uint) *BasketLineCreate {
	blc.mutation.SetTicketAmount(u)
	return blc
}

// SetPrice sets the "Price" field.
func (blc *BasketLineCreate) SetPrice(f float32) *BasketLineCreate {
	blc.mutation.SetPrice(f)
	return blc
}

// SetID sets the "id" field.
func (blc *BasketLineCreate) SetID(u uuid.UUID) *BasketLineCreate {
	blc.mutation.SetID(u)
	return blc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (blc *BasketLineCreate) SetNillableID(u *uuid.UUID) *BasketLineCreate {
	if u != nil {
		blc.SetID(*u)
	}
	return blc
}

// SetEventID sets the "Event" edge to the Event entity by ID.
func (blc *BasketLineCreate) SetEventID(id uuid.UUID) *BasketLineCreate {
	blc.mutation.SetEventID(id)
	return blc
}

// SetNillableEventID sets the "Event" edge to the Event entity by ID if the given value is not nil.
func (blc *BasketLineCreate) SetNillableEventID(id *uuid.UUID) *BasketLineCreate {
	if id != nil {
		blc = blc.SetEventID(*id)
	}
	return blc
}

// SetEvent sets the "Event" edge to the Event entity.
func (blc *BasketLineCreate) SetEvent(e *Event) *BasketLineCreate {
	return blc.SetEventID(e.ID)
}

// SetBasketID sets the "Basket" edge to the Basket entity by ID.
func (blc *BasketLineCreate) SetBasketID(id uuid.UUID) *BasketLineCreate {
	blc.mutation.SetBasketID(id)
	return blc
}

// SetNillableBasketID sets the "Basket" edge to the Basket entity by ID if the given value is not nil.
func (blc *BasketLineCreate) SetNillableBasketID(id *uuid.UUID) *BasketLineCreate {
	if id != nil {
		blc = blc.SetBasketID(*id)
	}
	return blc
}

// SetBasket sets the "Basket" edge to the Basket entity.
func (blc *BasketLineCreate) SetBasket(b *Basket) *BasketLineCreate {
	return blc.SetBasketID(b.ID)
}

// Mutation returns the BasketLineMutation object of the builder.
func (blc *BasketLineCreate) Mutation() *BasketLineMutation {
	return blc.mutation
}

// Save creates the BasketLine in the database.
func (blc *BasketLineCreate) Save(ctx context.Context) (*BasketLine, error) {
	var (
		err  error
		node *BasketLine
	)
	blc.defaults()
	if len(blc.hooks) == 0 {
		if err = blc.check(); err != nil {
			return nil, err
		}
		node, err = blc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BasketLineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = blc.check(); err != nil {
				return nil, err
			}
			blc.mutation = mutation
			if node, err = blc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(blc.hooks) - 1; i >= 0; i-- {
			if blc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = blc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, blc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (blc *BasketLineCreate) SaveX(ctx context.Context) *BasketLine {
	v, err := blc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (blc *BasketLineCreate) Exec(ctx context.Context) error {
	_, err := blc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blc *BasketLineCreate) ExecX(ctx context.Context) {
	if err := blc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (blc *BasketLineCreate) defaults() {
	if _, ok := blc.mutation.ID(); !ok {
		v := basketline.DefaultID()
		blc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (blc *BasketLineCreate) check() error {
	if _, ok := blc.mutation.TicketAmount(); !ok {
		return &ValidationError{Name: "TicketAmount", err: errors.New(`ent: missing required field "BasketLine.TicketAmount"`)}
	}
	if _, ok := blc.mutation.Price(); !ok {
		return &ValidationError{Name: "Price", err: errors.New(`ent: missing required field "BasketLine.Price"`)}
	}
	return nil
}

func (blc *BasketLineCreate) sqlSave(ctx context.Context) (*BasketLine, error) {
	_node, _spec := blc.createSpec()
	if err := sqlgraph.CreateNode(ctx, blc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (blc *BasketLineCreate) createSpec() (*BasketLine, *sqlgraph.CreateSpec) {
	var (
		_node = &BasketLine{config: blc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: basketline.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: basketline.FieldID,
			},
		}
	)
	if id, ok := blc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := blc.mutation.TicketAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: basketline.FieldTicketAmount,
		})
		_node.TicketAmount = value
	}
	if value, ok := blc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: basketline.FieldPrice,
		})
		_node.Price = value
	}
	if nodes := blc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   basketline.EventTable,
			Columns: []string{basketline.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := blc.mutation.BasketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   basketline.BasketTable,
			Columns: []string{basketline.BasketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: basket.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.basket_basket_line = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BasketLineCreateBulk is the builder for creating many BasketLine entities in bulk.
type BasketLineCreateBulk struct {
	config
	builders []*BasketLineCreate
}

// Save creates the BasketLine entities in the database.
func (blcb *BasketLineCreateBulk) Save(ctx context.Context) ([]*BasketLine, error) {
	specs := make([]*sqlgraph.CreateSpec, len(blcb.builders))
	nodes := make([]*BasketLine, len(blcb.builders))
	mutators := make([]Mutator, len(blcb.builders))
	for i := range blcb.builders {
		func(i int, root context.Context) {
			builder := blcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BasketLineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, blcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, blcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, blcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (blcb *BasketLineCreateBulk) SaveX(ctx context.Context) []*BasketLine {
	v, err := blcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (blcb *BasketLineCreateBulk) Exec(ctx context.Context) error {
	_, err := blcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blcb *BasketLineCreateBulk) ExecX(ctx context.Context) {
	if err := blcb.Exec(ctx); err != nil {
		panic(err)
	}
}
