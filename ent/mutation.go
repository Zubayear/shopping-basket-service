// Code generated by entc, DO NOT EDIT.

package ent

import (
	"ShoppingBasket/ent/basket"
	"ShoppingBasket/ent/basketline"
	"ShoppingBasket/ent/event"
	"ShoppingBasket/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBasket     = "Basket"
	TypeBasketLine = "BasketLine"
	TypeEvent      = "Event"
)

// BasketMutation represents an operation that mutates the Basket nodes in the graph.
type BasketMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	_UserId            *uuid.UUID
	_CouponCode        *string
	clearedFields      map[string]struct{}
	_BasketLine        map[uuid.UUID]struct{}
	removed_BasketLine map[uuid.UUID]struct{}
	cleared_BasketLine bool
	done               bool
	oldValue           func(context.Context) (*Basket, error)
	predicates         []predicate.Basket
}

var _ ent.Mutation = (*BasketMutation)(nil)

// basketOption allows management of the mutation configuration using functional options.
type basketOption func(*BasketMutation)

// newBasketMutation creates new mutation for the Basket entity.
func newBasketMutation(c config, op Op, opts ...basketOption) *BasketMutation {
	m := &BasketMutation{
		config:        c,
		op:            op,
		typ:           TypeBasket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBasketID sets the ID field of the mutation.
func withBasketID(id uuid.UUID) basketOption {
	return func(m *BasketMutation) {
		var (
			err   error
			once  sync.Once
			value *Basket
		)
		m.oldValue = func(ctx context.Context) (*Basket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Basket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBasket sets the old Basket of the mutation.
func withBasket(node *Basket) basketOption {
	return func(m *BasketMutation) {
		m.oldValue = func(context.Context) (*Basket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BasketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BasketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Basket entities.
func (m *BasketMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BasketMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BasketMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Basket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserId sets the "UserId" field.
func (m *BasketMutation) SetUserId(u uuid.UUID) {
	m._UserId = &u
}

// UserId returns the value of the "UserId" field in the mutation.
func (m *BasketMutation) UserId() (r uuid.UUID, exists bool) {
	v := m._UserId
	if v == nil {
		return
	}
	return *v, true
}

// OldUserId returns the old "UserId" field's value of the Basket entity.
// If the Basket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BasketMutation) OldUserId(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserId: %w", err)
	}
	return oldValue.UserId, nil
}

// ResetUserId resets all changes to the "UserId" field.
func (m *BasketMutation) ResetUserId() {
	m._UserId = nil
}

// SetCouponCode sets the "CouponCode" field.
func (m *BasketMutation) SetCouponCode(s string) {
	m._CouponCode = &s
}

// CouponCode returns the value of the "CouponCode" field in the mutation.
func (m *BasketMutation) CouponCode() (r string, exists bool) {
	v := m._CouponCode
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponCode returns the old "CouponCode" field's value of the Basket entity.
// If the Basket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BasketMutation) OldCouponCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCouponCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCouponCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponCode: %w", err)
	}
	return oldValue.CouponCode, nil
}

// ResetCouponCode resets all changes to the "CouponCode" field.
func (m *BasketMutation) ResetCouponCode() {
	m._CouponCode = nil
}

// AddBasketLineIDs adds the "BasketLine" edge to the BasketLine entity by ids.
func (m *BasketMutation) AddBasketLineIDs(ids ...uuid.UUID) {
	if m._BasketLine == nil {
		m._BasketLine = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m._BasketLine[ids[i]] = struct{}{}
	}
}

// ClearBasketLine clears the "BasketLine" edge to the BasketLine entity.
func (m *BasketMutation) ClearBasketLine() {
	m.cleared_BasketLine = true
}

// BasketLineCleared reports if the "BasketLine" edge to the BasketLine entity was cleared.
func (m *BasketMutation) BasketLineCleared() bool {
	return m.cleared_BasketLine
}

// RemoveBasketLineIDs removes the "BasketLine" edge to the BasketLine entity by IDs.
func (m *BasketMutation) RemoveBasketLineIDs(ids ...uuid.UUID) {
	if m.removed_BasketLine == nil {
		m.removed_BasketLine = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m._BasketLine, ids[i])
		m.removed_BasketLine[ids[i]] = struct{}{}
	}
}

// RemovedBasketLine returns the removed IDs of the "BasketLine" edge to the BasketLine entity.
func (m *BasketMutation) RemovedBasketLineIDs() (ids []uuid.UUID) {
	for id := range m.removed_BasketLine {
		ids = append(ids, id)
	}
	return
}

// BasketLineIDs returns the "BasketLine" edge IDs in the mutation.
func (m *BasketMutation) BasketLineIDs() (ids []uuid.UUID) {
	for id := range m._BasketLine {
		ids = append(ids, id)
	}
	return
}

// ResetBasketLine resets all changes to the "BasketLine" edge.
func (m *BasketMutation) ResetBasketLine() {
	m._BasketLine = nil
	m.cleared_BasketLine = false
	m.removed_BasketLine = nil
}

// Where appends a list predicates to the BasketMutation builder.
func (m *BasketMutation) Where(ps ...predicate.Basket) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BasketMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Basket).
func (m *BasketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BasketMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._UserId != nil {
		fields = append(fields, basket.FieldUserId)
	}
	if m._CouponCode != nil {
		fields = append(fields, basket.FieldCouponCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BasketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case basket.FieldUserId:
		return m.UserId()
	case basket.FieldCouponCode:
		return m.CouponCode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BasketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case basket.FieldUserId:
		return m.OldUserId(ctx)
	case basket.FieldCouponCode:
		return m.OldCouponCode(ctx)
	}
	return nil, fmt.Errorf("unknown Basket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BasketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case basket.FieldUserId:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserId(v)
		return nil
	case basket.FieldCouponCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponCode(v)
		return nil
	}
	return fmt.Errorf("unknown Basket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BasketMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BasketMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BasketMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Basket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BasketMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BasketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BasketMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Basket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BasketMutation) ResetField(name string) error {
	switch name {
	case basket.FieldUserId:
		m.ResetUserId()
		return nil
	case basket.FieldCouponCode:
		m.ResetCouponCode()
		return nil
	}
	return fmt.Errorf("unknown Basket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BasketMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._BasketLine != nil {
		edges = append(edges, basket.EdgeBasketLine)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BasketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case basket.EdgeBasketLine:
		ids := make([]ent.Value, 0, len(m._BasketLine))
		for id := range m._BasketLine {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BasketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_BasketLine != nil {
		edges = append(edges, basket.EdgeBasketLine)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BasketMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case basket.EdgeBasketLine:
		ids := make([]ent.Value, 0, len(m.removed_BasketLine))
		for id := range m.removed_BasketLine {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BasketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_BasketLine {
		edges = append(edges, basket.EdgeBasketLine)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BasketMutation) EdgeCleared(name string) bool {
	switch name {
	case basket.EdgeBasketLine:
		return m.cleared_BasketLine
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BasketMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Basket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BasketMutation) ResetEdge(name string) error {
	switch name {
	case basket.EdgeBasketLine:
		m.ResetBasketLine()
		return nil
	}
	return fmt.Errorf("unknown Basket edge %s", name)
}

// BasketLineMutation represents an operation that mutates the BasketLine nodes in the graph.
type BasketLineMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	_TicketAmount    *uint
	add_TicketAmount *int
	_Price           *float32
	add_Price        *float32
	clearedFields    map[string]struct{}
	_Event           *uuid.UUID
	cleared_Event    bool
	_Basket          *uuid.UUID
	cleared_Basket   bool
	done             bool
	oldValue         func(context.Context) (*BasketLine, error)
	predicates       []predicate.BasketLine
}

var _ ent.Mutation = (*BasketLineMutation)(nil)

// basketlineOption allows management of the mutation configuration using functional options.
type basketlineOption func(*BasketLineMutation)

// newBasketLineMutation creates new mutation for the BasketLine entity.
func newBasketLineMutation(c config, op Op, opts ...basketlineOption) *BasketLineMutation {
	m := &BasketLineMutation{
		config:        c,
		op:            op,
		typ:           TypeBasketLine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBasketLineID sets the ID field of the mutation.
func withBasketLineID(id uuid.UUID) basketlineOption {
	return func(m *BasketLineMutation) {
		var (
			err   error
			once  sync.Once
			value *BasketLine
		)
		m.oldValue = func(ctx context.Context) (*BasketLine, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BasketLine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBasketLine sets the old BasketLine of the mutation.
func withBasketLine(node *BasketLine) basketlineOption {
	return func(m *BasketLineMutation) {
		m.oldValue = func(context.Context) (*BasketLine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BasketLineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BasketLineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BasketLine entities.
func (m *BasketLineMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BasketLineMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BasketLineMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BasketLine.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTicketAmount sets the "TicketAmount" field.
func (m *BasketLineMutation) SetTicketAmount(u uint) {
	m._TicketAmount = &u
	m.add_TicketAmount = nil
}

// TicketAmount returns the value of the "TicketAmount" field in the mutation.
func (m *BasketLineMutation) TicketAmount() (r uint, exists bool) {
	v := m._TicketAmount
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketAmount returns the old "TicketAmount" field's value of the BasketLine entity.
// If the BasketLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BasketLineMutation) OldTicketAmount(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketAmount: %w", err)
	}
	return oldValue.TicketAmount, nil
}

// AddTicketAmount adds u to the "TicketAmount" field.
func (m *BasketLineMutation) AddTicketAmount(u int) {
	if m.add_TicketAmount != nil {
		*m.add_TicketAmount += u
	} else {
		m.add_TicketAmount = &u
	}
}

// AddedTicketAmount returns the value that was added to the "TicketAmount" field in this mutation.
func (m *BasketLineMutation) AddedTicketAmount() (r int, exists bool) {
	v := m.add_TicketAmount
	if v == nil {
		return
	}
	return *v, true
}

// ResetTicketAmount resets all changes to the "TicketAmount" field.
func (m *BasketLineMutation) ResetTicketAmount() {
	m._TicketAmount = nil
	m.add_TicketAmount = nil
}

// SetPrice sets the "Price" field.
func (m *BasketLineMutation) SetPrice(f float32) {
	m._Price = &f
	m.add_Price = nil
}

// Price returns the value of the "Price" field in the mutation.
func (m *BasketLineMutation) Price() (r float32, exists bool) {
	v := m._Price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "Price" field's value of the BasketLine entity.
// If the BasketLine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BasketLineMutation) OldPrice(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "Price" field.
func (m *BasketLineMutation) AddPrice(f float32) {
	if m.add_Price != nil {
		*m.add_Price += f
	} else {
		m.add_Price = &f
	}
}

// AddedPrice returns the value that was added to the "Price" field in this mutation.
func (m *BasketLineMutation) AddedPrice() (r float32, exists bool) {
	v := m.add_Price
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "Price" field.
func (m *BasketLineMutation) ResetPrice() {
	m._Price = nil
	m.add_Price = nil
}

// SetEventID sets the "Event" edge to the Event entity by id.
func (m *BasketLineMutation) SetEventID(id uuid.UUID) {
	m._Event = &id
}

// ClearEvent clears the "Event" edge to the Event entity.
func (m *BasketLineMutation) ClearEvent() {
	m.cleared_Event = true
}

// EventCleared reports if the "Event" edge to the Event entity was cleared.
func (m *BasketLineMutation) EventCleared() bool {
	return m.cleared_Event
}

// EventID returns the "Event" edge ID in the mutation.
func (m *BasketLineMutation) EventID() (id uuid.UUID, exists bool) {
	if m._Event != nil {
		return *m._Event, true
	}
	return
}

// EventIDs returns the "Event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *BasketLineMutation) EventIDs() (ids []uuid.UUID) {
	if id := m._Event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "Event" edge.
func (m *BasketLineMutation) ResetEvent() {
	m._Event = nil
	m.cleared_Event = false
}

// SetBasketID sets the "Basket" edge to the Basket entity by id.
func (m *BasketLineMutation) SetBasketID(id uuid.UUID) {
	m._Basket = &id
}

// ClearBasket clears the "Basket" edge to the Basket entity.
func (m *BasketLineMutation) ClearBasket() {
	m.cleared_Basket = true
}

// BasketCleared reports if the "Basket" edge to the Basket entity was cleared.
func (m *BasketLineMutation) BasketCleared() bool {
	return m.cleared_Basket
}

// BasketID returns the "Basket" edge ID in the mutation.
func (m *BasketLineMutation) BasketID() (id uuid.UUID, exists bool) {
	if m._Basket != nil {
		return *m._Basket, true
	}
	return
}

// BasketIDs returns the "Basket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BasketID instead. It exists only for internal usage by the builders.
func (m *BasketLineMutation) BasketIDs() (ids []uuid.UUID) {
	if id := m._Basket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBasket resets all changes to the "Basket" edge.
func (m *BasketLineMutation) ResetBasket() {
	m._Basket = nil
	m.cleared_Basket = false
}

// Where appends a list predicates to the BasketLineMutation builder.
func (m *BasketLineMutation) Where(ps ...predicate.BasketLine) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BasketLineMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (BasketLine).
func (m *BasketLineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BasketLineMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._TicketAmount != nil {
		fields = append(fields, basketline.FieldTicketAmount)
	}
	if m._Price != nil {
		fields = append(fields, basketline.FieldPrice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BasketLineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case basketline.FieldTicketAmount:
		return m.TicketAmount()
	case basketline.FieldPrice:
		return m.Price()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BasketLineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case basketline.FieldTicketAmount:
		return m.OldTicketAmount(ctx)
	case basketline.FieldPrice:
		return m.OldPrice(ctx)
	}
	return nil, fmt.Errorf("unknown BasketLine field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BasketLineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case basketline.FieldTicketAmount:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketAmount(v)
		return nil
	case basketline.FieldPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	}
	return fmt.Errorf("unknown BasketLine field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BasketLineMutation) AddedFields() []string {
	var fields []string
	if m.add_TicketAmount != nil {
		fields = append(fields, basketline.FieldTicketAmount)
	}
	if m.add_Price != nil {
		fields = append(fields, basketline.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BasketLineMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case basketline.FieldTicketAmount:
		return m.AddedTicketAmount()
	case basketline.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BasketLineMutation) AddField(name string, value ent.Value) error {
	switch name {
	case basketline.FieldTicketAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTicketAmount(v)
		return nil
	case basketline.FieldPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown BasketLine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BasketLineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BasketLineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BasketLineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BasketLine nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BasketLineMutation) ResetField(name string) error {
	switch name {
	case basketline.FieldTicketAmount:
		m.ResetTicketAmount()
		return nil
	case basketline.FieldPrice:
		m.ResetPrice()
		return nil
	}
	return fmt.Errorf("unknown BasketLine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BasketLineMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._Event != nil {
		edges = append(edges, basketline.EdgeEvent)
	}
	if m._Basket != nil {
		edges = append(edges, basketline.EdgeBasket)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BasketLineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case basketline.EdgeEvent:
		if id := m._Event; id != nil {
			return []ent.Value{*id}
		}
	case basketline.EdgeBasket:
		if id := m._Basket; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BasketLineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BasketLineMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BasketLineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_Event {
		edges = append(edges, basketline.EdgeEvent)
	}
	if m.cleared_Basket {
		edges = append(edges, basketline.EdgeBasket)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BasketLineMutation) EdgeCleared(name string) bool {
	switch name {
	case basketline.EdgeEvent:
		return m.cleared_Event
	case basketline.EdgeBasket:
		return m.cleared_Basket
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BasketLineMutation) ClearEdge(name string) error {
	switch name {
	case basketline.EdgeEvent:
		m.ClearEvent()
		return nil
	case basketline.EdgeBasket:
		m.ClearBasket()
		return nil
	}
	return fmt.Errorf("unknown BasketLine unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BasketLineMutation) ResetEdge(name string) error {
	switch name {
	case basketline.EdgeEvent:
		m.ResetEvent()
		return nil
	case basketline.EdgeBasket:
		m.ResetBasket()
		return nil
	}
	return fmt.Errorf("unknown BasketLine edge %s", name)
}

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	_Name         *string
	_Date         *time.Time
	clearedFields map[string]struct{}
	owner         *uuid.UUID
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*Event, error)
	predicates    []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id uuid.UUID) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Event entities.
func (m *EventMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "Name" field.
func (m *EventMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *EventMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *EventMutation) ResetName() {
	m._Name = nil
}

// SetDate sets the "Date" field.
func (m *EventMutation) SetDate(t time.Time) {
	m._Date = &t
}

// Date returns the value of the "Date" field in the mutation.
func (m *EventMutation) Date() (r time.Time, exists bool) {
	v := m._Date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "Date" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "Date" field.
func (m *EventMutation) ResetDate() {
	m._Date = nil
}

// SetOwnerID sets the "owner" edge to the BasketLine entity by id.
func (m *EventMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the BasketLine entity.
func (m *EventMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the BasketLine entity was cleared.
func (m *EventMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *EventMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *EventMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *EventMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._Name != nil {
		fields = append(fields, event.FieldName)
	}
	if m._Date != nil {
		fields = append(fields, event.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldName:
		return m.Name()
	case event.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldName:
		return m.OldName(ctx)
	case event.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case event.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldName:
		m.ResetName()
		return nil
	case event.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, event.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, event.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	case event.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}
