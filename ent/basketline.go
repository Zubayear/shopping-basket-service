// Code generated by entc, DO NOT EDIT.

package ent

import (
	"ShoppingBasket/ent/basket"
	"ShoppingBasket/ent/basketline"
	"ShoppingBasket/ent/event"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// BasketLine is the model entity for the BasketLine schema.
type BasketLine struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TicketAmount holds the value of the "TicketAmount" field.
	TicketAmount uint `json:"TicketAmount,omitempty"`
	// Price holds the value of the "Price" field.
	Price float32 `json:"Price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BasketLineQuery when eager-loading is set.
	Edges              BasketLineEdges `json:"edges"`
	basket_basket_line *uuid.UUID
}

// BasketLineEdges holds the relations/edges for other nodes in the graph.
type BasketLineEdges struct {
	// Event holds the value of the Event edge.
	Event *Event `json:"Event,omitempty"`
	// Basket holds the value of the Basket edge.
	Basket *Basket `json:"Basket,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BasketLineEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// The edge Event was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "Event"}
}

// BasketOrErr returns the Basket value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BasketLineEdges) BasketOrErr() (*Basket, error) {
	if e.loadedTypes[1] {
		if e.Basket == nil {
			// The edge Basket was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: basket.Label}
		}
		return e.Basket, nil
	}
	return nil, &NotLoadedError{edge: "Basket"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BasketLine) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case basketline.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case basketline.FieldTicketAmount:
			values[i] = new(sql.NullInt64)
		case basketline.FieldID:
			values[i] = new(uuid.UUID)
		case basketline.ForeignKeys[0]: // basket_basket_line
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type BasketLine", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BasketLine fields.
func (bl *BasketLine) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case basketline.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bl.ID = *value
			}
		case basketline.FieldTicketAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TicketAmount", values[i])
			} else if value.Valid {
				bl.TicketAmount = uint(value.Int64)
			}
		case basketline.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Price", values[i])
			} else if value.Valid {
				bl.Price = float32(value.Float64)
			}
		case basketline.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field basket_basket_line", values[i])
			} else if value.Valid {
				bl.basket_basket_line = new(uuid.UUID)
				*bl.basket_basket_line = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryEvent queries the "Event" edge of the BasketLine entity.
func (bl *BasketLine) QueryEvent() *EventQuery {
	return (&BasketLineClient{config: bl.config}).QueryEvent(bl)
}

// QueryBasket queries the "Basket" edge of the BasketLine entity.
func (bl *BasketLine) QueryBasket() *BasketQuery {
	return (&BasketLineClient{config: bl.config}).QueryBasket(bl)
}

// Update returns a builder for updating this BasketLine.
// Note that you need to call BasketLine.Unwrap() before calling this method if this BasketLine
// was returned from a transaction, and the transaction was committed or rolled back.
func (bl *BasketLine) Update() *BasketLineUpdateOne {
	return (&BasketLineClient{config: bl.config}).UpdateOne(bl)
}

// Unwrap unwraps the BasketLine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bl *BasketLine) Unwrap() *BasketLine {
	tx, ok := bl.config.driver.(*txDriver)
	if !ok {
		panic("ent: BasketLine is not a transactional entity")
	}
	bl.config.driver = tx.drv
	return bl
}

// String implements the fmt.Stringer.
func (bl *BasketLine) String() string {
	var builder strings.Builder
	builder.WriteString("BasketLine(")
	builder.WriteString(fmt.Sprintf("id=%v", bl.ID))
	builder.WriteString(", TicketAmount=")
	builder.WriteString(fmt.Sprintf("%v", bl.TicketAmount))
	builder.WriteString(", Price=")
	builder.WriteString(fmt.Sprintf("%v", bl.Price))
	builder.WriteByte(')')
	return builder.String()
}

// BasketLines is a parsable slice of BasketLine.
type BasketLines []*BasketLine

func (bl BasketLines) config(cfg config) {
	for _i := range bl {
		bl[_i].config = cfg
	}
}
