// Code generated by entc, DO NOT EDIT.

package basketline

import (
	"ShoppingBasket/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TicketAmount applies equality check predicate on the "TicketAmount" field. It's identical to TicketAmountEQ.
func TicketAmount(v uint) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTicketAmount), v))
	})
}

// Price applies equality check predicate on the "Price" field. It's identical to PriceEQ.
func Price(v float32) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// TicketAmountEQ applies the EQ predicate on the "TicketAmount" field.
func TicketAmountEQ(v uint) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTicketAmount), v))
	})
}

// TicketAmountNEQ applies the NEQ predicate on the "TicketAmount" field.
func TicketAmountNEQ(v uint) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTicketAmount), v))
	})
}

// TicketAmountIn applies the In predicate on the "TicketAmount" field.
func TicketAmountIn(vs ...uint) predicate.BasketLine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BasketLine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTicketAmount), v...))
	})
}

// TicketAmountNotIn applies the NotIn predicate on the "TicketAmount" field.
func TicketAmountNotIn(vs ...uint) predicate.BasketLine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BasketLine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTicketAmount), v...))
	})
}

// TicketAmountGT applies the GT predicate on the "TicketAmount" field.
func TicketAmountGT(v uint) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTicketAmount), v))
	})
}

// TicketAmountGTE applies the GTE predicate on the "TicketAmount" field.
func TicketAmountGTE(v uint) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTicketAmount), v))
	})
}

// TicketAmountLT applies the LT predicate on the "TicketAmount" field.
func TicketAmountLT(v uint) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTicketAmount), v))
	})
}

// TicketAmountLTE applies the LTE predicate on the "TicketAmount" field.
func TicketAmountLTE(v uint) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTicketAmount), v))
	})
}

// PriceEQ applies the EQ predicate on the "Price" field.
func PriceEQ(v float32) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "Price" field.
func PriceNEQ(v float32) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "Price" field.
func PriceIn(vs ...float32) predicate.BasketLine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BasketLine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "Price" field.
func PriceNotIn(vs ...float32) predicate.BasketLine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BasketLine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "Price" field.
func PriceGT(v float32) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "Price" field.
func PriceGTE(v float32) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "Price" field.
func PriceLT(v float32) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "Price" field.
func PriceLTE(v float32) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// HasEvent applies the HasEdge predicate on the "Event" edge.
func HasEvent() predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "Event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EventTable, EventColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBasket applies the HasEdge predicate on the "Basket" edge.
func HasBasket() predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BasketTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BasketTable, BasketColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBasketWith applies the HasEdge predicate on the "Basket" edge with a given conditions (other predicates).
func HasBasketWith(preds ...predicate.Basket) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BasketInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BasketTable, BasketColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BasketLine) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BasketLine) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BasketLine) predicate.BasketLine {
	return predicate.BasketLine(func(s *sql.Selector) {
		p(s.Not())
	})
}
