// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ShoppingBasket.proto

package ShoppingBasket

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShoppingBasket service

func NewShoppingBasketEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShoppingBasket service

type ShoppingBasketService interface {
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...client.CallOption) (*CreateEventResponse, error)
	GetEvent(ctx context.Context, in *GetEventByIdRequest, opts ...client.CallOption) (*GetEventByIdResponse, error)
}

type shoppingBasketService struct {
	c    client.Client
	name string
}

func NewShoppingBasketService(name string, c client.Client) ShoppingBasketService {
	return &shoppingBasketService{
		c:    c,
		name: name,
	}
}

func (c *shoppingBasketService) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...client.CallOption) (*CreateEventResponse, error) {
	req := c.c.NewRequest(c.name, "ShoppingBasket.CreateEvent", in)
	out := new(CreateEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shoppingBasketService) GetEvent(ctx context.Context, in *GetEventByIdRequest, opts ...client.CallOption) (*GetEventByIdResponse, error) {
	req := c.c.NewRequest(c.name, "ShoppingBasket.GetEvent", in)
	out := new(GetEventByIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShoppingBasket service

type ShoppingBasketHandler interface {
	CreateEvent(context.Context, *CreateEventRequest, *CreateEventResponse) error
	GetEvent(context.Context, *GetEventByIdRequest, *GetEventByIdResponse) error
}

func RegisterShoppingBasketHandler(s server.Server, hdlr ShoppingBasketHandler, opts ...server.HandlerOption) error {
	type shoppingBasket interface {
		CreateEvent(ctx context.Context, in *CreateEventRequest, out *CreateEventResponse) error
		GetEvent(ctx context.Context, in *GetEventByIdRequest, out *GetEventByIdResponse) error
	}
	type ShoppingBasket struct {
		shoppingBasket
	}
	h := &shoppingBasketHandler{hdlr}
	return s.Handle(s.NewHandler(&ShoppingBasket{h}, opts...))
}

type shoppingBasketHandler struct {
	ShoppingBasketHandler
}

func (h *shoppingBasketHandler) CreateEvent(ctx context.Context, in *CreateEventRequest, out *CreateEventResponse) error {
	return h.ShoppingBasketHandler.CreateEvent(ctx, in, out)
}

func (h *shoppingBasketHandler) GetEvent(ctx context.Context, in *GetEventByIdRequest, out *GetEventByIdResponse) error {
	return h.ShoppingBasketHandler.GetEvent(ctx, in, out)
}
